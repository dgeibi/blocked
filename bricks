#!/bin/bash
# BRICKS the Gfwed domains list by @leaskh

addDomain() {
    if [ "$1" = '' ]; then
        echo 'Domain can not be empty!';
        exit 1
    fi
    echo $1 >> $brickFile
    cleanList
    echo 'Done :)'
}

removeDomain() {
    grep -v "$1" $brickFile > $brickFile.temp
    mv $brickFile.temp $brickFile
    cleanList
    echo 'Done :)'
}

cleanList() {
    sed -i '/^$/d' $brickFile
    sort -u $brickFile -o $brickFile
}

addDomains() {
    if [ ! -e "$1" ]; then
        echo 'Domains file not found!';
        exit 2
    fi
    cat $1 >> $brickFile
    cleanList
    echo 'Done :)'
}

makePac() {
    if [ "$*" = '' ]; then
        echo 'Proxy configurations can not be empty!';
        exit 1
    fi
    length=0
    opFile=proxy.pac
    while read -r line; do
        if [ "$line" != '' ]; then
            length=$(( length + 1 ))
        fi
    done < "$brickFile"
{
cat <<EOF
// BRICKS Pac by @leaskh
// https://github.com/leask/bricks
// www.leaskh.com, i@leaskh.com
EOF

echo "var proxy = '$*';"
echo "var bricks = {"
sed -e "s/.*/'\0': 1,/" -e "$ s/,//" "$brickFile"
echo "};"
echo "var white = {"
sed -e "s/.*/'\0': 1,/" -e "$ s/,//" "$whiteFile"
echo "};"

cat <<EOF
function testDomain(target, domains) {
  var suffix;
  var pos = target.lastIndexOf('.');
  pos = target.lastIndexOf('.', pos - 1);
  while (true) {
    if (pos <= 0) return domains.hasOwnProperty(target);
    suffix = target.substring(pos + 1);
    if (domains.hasOwnProperty(suffix)) {
      return true;
    }
    pos = target.lastIndexOf('.', pos - 1);
  }
}
var ipv4Pattern = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
function isPrivateIP(host) {
  if (!ipv4Pattern.test(host)) return false;
  return (
    isInNet(host, "172.16.0.0", "255.240.0.0") ||
    isInNet(host, "192.168.0.0", "255.255.0.0") ||
    isInNet(host, "127.0.0.0", "255.255.255.0") ||
    isInNet(host, "10.0.0.0", "255.0.0.0")
  )
}
function FindProxyForURL(url, host) {
  if (isPlainHostName(host) || isPrivateIP(host) || testDomain(host, white)) {
    return 'DIRECT';
  }
  if (testDomain(host, bricks)) {
    return proxy;
  }
  return 'DIRECT';
}
EOF
} > $opFile
    echo 'Done :)'
    echo "Rules: $length items."
    echo "Usage: Use the newly created $opFile as your web browser's automatic"
    echo 'PAC(Proxy auto-config) file.'
}

pacServer() {
    makePac "$@"
    echo 'PAC is now serving at: 0.0.0.0:8000'
    echo 'Check it out with: $ curl http://127.0.0.1:8000/proxy.pac'
    python -m http.server
}

showHelp() {
    echo ' ____________________________________________ '
    echo '| Twitter|________|________|________|__Vimeo_|'
    echo '|________|Facebook|________|________|________|'
    echo '|________|________|________|________|________|'
    echo '|________|________|________|_Google_|________|'
    echo '|YouTube_|        |________|________|________|'
    echo '|                                            |'
    echo '|              *                             |'
    echo '|                                            |'
    echo '|              _______                       |'
    echo '|             |_______|                      |'
    echo '|____________________________________________|'
    echo ''
    echo 'BRICKS is a list for all the domains blocked by the Chinese GFW (Great-Fire-Wall).'
    echo ''
    echo '- add      : Add domain into BRICKS'
    echo '- adds     : Merge file which contains domains into BRICKS'
    echo '- remove   : Remove domain from BRICKS'
    echo '- clean    : Sort & uniq domains in BRICKS'
    echo '- makpac   : Make PAC file with BRICKS'
    echo '- pacsrv   : Make PAC file and launch HTTP server'
    echo '- help     : Show this infos'
}

unknownCommand() {
    showHelp
    exit 1
}

# BlackBox configurations
brickFile="./blocked.txt"
if [[ -n "$3" ]]; then
    brickFile="$3"
fi

whiteFile="./white.txt"
if [[ -n "$4" ]]; then
    whiteFile="$4"
fi

# Main logic
case "$1" in
    'add'     ) addDomain    $2;;
    'adds'    ) addDomains   $2;;
    'remove'  ) removeDomain $2;;
    'clean'   ) cleanList      ;;
    'makpac'  ) makePac      $2;;
    'pacsrv'  ) pacServer    $2;;
    'help'    ) showHelp       ;;
    *         ) unknownCommand ;;
esac
exit 0
